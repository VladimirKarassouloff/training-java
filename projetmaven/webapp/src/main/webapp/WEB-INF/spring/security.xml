<beans:beans xmlns="http://www.springframework.org/schema/security"
             xmlns:beans="http://www.springframework.org/schema/beans"
             xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
             xmlns:context="http://www.springframework.org/schema/context"
             xmlns:security="http://www.springframework.org/schema/security"
             xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
 http://www.springframework.org/schema/security
 http://www.springframework.org/schema/security/spring-security.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

    <http>
        <intercept-url pattern="/css/**" access="permitAll()"/>
        <intercept-url pattern="/js/**" access="permitAll()"/>
        <intercept-url pattern="/login" access="isAnonymous()"/>
        <intercept-url pattern="/logout" access="isAuthenticated()"/>
        <intercept-url pattern="/**" access="hasRole('ROLE_USER')"/>

        <form-login login-page="/login"
                    default-target-url="/index"
                    username-parameter="j_username"
                    password-parameter="j_password"
        />
        <logout logout-success-url="/login?logout"/>

    </http>

    <security:authentication-manager>
        <security:authentication-provider>
            <jdbc-user-service data-source-ref="dataSource"
                               users-by-username-query=
                                       "SELECT username, password, enabled FROM user WHERE username=?"
                               authorities-by-username-query=
                                       "SELECT username, name FROM user JOIN role_user ON user.id=role_user.users_id JOIN role ON role_user.roles_id=role.id WHERE username=?" />

        </security:authentication-provider>
    </security:authentication-manager>

</beans:beans>
